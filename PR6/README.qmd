---
title: "Практическая работа 6"
format:
  md:
    output-file: README.md
editor: visual
---

# Исследование вредоносной активности в домене Windows

## Цель работы

1.  Закрепить навыки исследования данных журнала Windows Active Directory
2.  Изучить структуру журнала системы Windows Active Directory
3.  Закрепить практические навыки использования языка программирования R для обработки данных
4.  Закрепить знания основных функций обработки данных экосистемы `tidyverse` языка R

## Исходные данные

1.  RStudio

## Задание

Используя программный пакет `dplyr` языка программирования R, провести анализ журналов и ответить на вопросы

## Ход работы

### Шаг 1. Подготовка данных

```{r}
library(dplyr)
library(jsonlite)
library(tidyr)
library(xml2)
library(rvest)
```

jsonlite: Эта библиотека предоставляет функции для работы с данными в формате JSON. Она позволяет импортировать и экспортировать данные в формате JSON, а также выполнять операции по обработке и манипуляции с JSON-данными.

tidyr: Эта библиотека предоставляет функции для работы с данными в "аккуратном" формате (tidy data). Она позволяет перестраивать данные, преобразовывать широкий формат (wide format) в длинный формат (long format) и наоборот, а также выполнять другие операции по преобразованию структуры данных.

xml2: Эта библиотека предоставляет функции для работы с данными в формате XML. Она позволяет импортировать и экспортировать данные в формате XML, а также выполнять операции по обработке и манипуляции с XML-данными.

rvest: Эта библиотека предоставляет функции для web-скрапинга и извлечения данных с веб-страниц. Она позволяет получать данные из HTML-страниц, извлекать таблицы, тексты, ссылки и другую информацию с веб-страниц, а также выполнять другие операции по обработке и анализу веб-данных.

#### Импорт данных

```{r}
data <- stream_in(file('caldera_attack_evals_round1_day1_2019-10-20201108.json'))
```

Выполняем чтение данных из JSON-файла и сохраняет их в переменную data.

#### Привести датасеты в вид "аккуратных данных", преобразовать типы столбцов в соответствии с типом данных

```{r}
neat_data <- data %>%
  mutate(`@timestamp` = as.POSIXct(`@timestamp`, format = "%Y-%m-%dT%H:%M:%OSZ", tz = "UTC")) %>%
  rename(timestamp = `@timestamp`, metadata = `@metadata`)
```

Преобразуем столбец @timestamp в формат POSIXct, который является типом данных для хранения даты и времени. Функция as.POSIXct() принимает на вход значение @timestamp, указывает формат даты и времени "%Y-%m-%dT%H:%M:%OSZ" и устанавливает временную зону tz = "UTC". Далее переименовываем столбцы @timestamp и @metadata в timestamp и metadata соответственно. Таким образом, столбцы будут иметь более понятные и удобные для использования имена.

#### Просмотрите общую структуру данных с помощью функции glimpse()

```{r}
glimpse(neat_data)
```

### Шаг 2. Анализ данных

#### Задание 1. Раскройте датафрейм избавившись от вложенных датафреймов.

```{r}
data <- neat_data %>%
  tidyr::unnest(c(metadata, event, log, winlog, ecs, host, agent), names_sep = ".")
data
```

Использую функцию unnest() из библиотеки tidyr. Она преобразует столбцы metadata, event, log, winlog, ecs, host и agent из neat_data в отдельные строки. При этом используется разделитель "." для создания новых столбцов на основе иерархической структуры исходных столбцов.

#### Задание 2. Минимизируйте количество колонок в датафрейме -- уберите колоки с единственным значением параметра.

```{r}
data_minimized  <- data %>%
  select(-metadata.beat, -metadata.type, -metadata.version, -metadata.topic,
         -event.kind, -winlog.api, -agent.ephemeral_id, -agent.hostname, 
         -agent.id, -agent.version, -agent.type) %>%
  mutate(`event.created` = as.POSIXct(`event.created`, format = "%Y-%m-%dT%H:%M:%OSZ", tz = "UTC"))
data_minimized
```

Использую функцию select() для выбора столбцов из исходного датафрейма. С помощью оператора "-" перед названием столбца мы указываем, что хотим исключить указанные столбцы из результирующего датафрейма. Далее использую функцию mutate() для создания нового столбца event.created. Функция as.POSIXct() преобразует столбец event.created в формат POSIXct, который является типом данных для хранения даты и времени в R. В данном случае, используется формат даты и времени "%Y-%m-%dT%H:%M:%OSZ" и временная зона tz = "UTC".

#### Задание 3. Какое количество хостов представлено в данном датасете?

```{r}
data_minimized %>%
  distinct(host.name)
```

Использую функцию distinct() для выбора уникальных значений столбца host.name из data_minimized. Функция distinct() удаляет дублирующиеся строки в датафрейме и возвращает только уникальные строки.

#### Задание 4. Подготовьте датафрейм с расшифровкой Windows Event_ID, приведите типы данных к типу их значений

```{r}
web_url <- "https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/plan/appendix-l--events-to-monitor"
web <- xml2::read_html(web_url)
event <- rvest::html_table(web)[[1]]
event

event_data <- event %>%
  mutate_at(vars(`Current Windows Event ID`, `Legacy Windows Event ID`), as.integer) %>%
  rename(c(Current_Windows_Event_ID = `Current Windows Event ID`, 
           Legacy_Windows_Event_ID = `Legacy Windows Event ID`, 
           Potential_Criticality = `Potential Criticality`, 
           Event_Summary = `Event Summary`))
event_data
```

Использую пакеты xml2 и rvest для чтения HTML-страницы по заданному URL и извлечения таблицы событий из HTML-кода. Затем происходит обработка и преобразование данных таблицы, включая преобразование некоторых столбцов в целочисленный формат и переименование столбцов для удобства работы с данными.

#### Задание 5. Есть ли в логе события с высоким и средним уровнем значимости? Сколько их?

```{r}
event_data %>%
  count(Potential_Criticality) %>%
  arrange(desc(n))
```

Кол-во событий со среднем уровнем: 79, с высоким: 9.

## Оценка результатов

В ходе практической работы были получены навыки исследования данных журнала Windows Active Directory.

## Вывод

Были закреплены навыки использования языка R для обработки данных.
